// Environment vars
process.env.EMAIL = "charleywright06@gmail.com";
process.env.PASSWORD = "Cha51wrt";
process.env.PORT = 3001;

let Kahoots = [];

// Requirements
const app = require("express")();
app.set("port", process.env.PORT || 3001);
const http = require("http").createServer(app);
const io = require("socket.io")(http);

// When the app is called serve the html page
app.get("/", function(req, res) {
	res.sendFile(__dirname + "/public/index.html");
});

// On the client connection
io.on("connection", function(socket) {
	const KahootJS = require("kahoot.js-updated");
	const client = new KahootJS();
	const puppeteer = require("puppeteer");
	socket.on("credentials submitted", function(data) {
		// Raise an event that the credentials have been recieved
		socket.emit("credentials recieved");

		// Join the kahoot
		client.join(data.Pin, data.Username);

		// When the kahoot is joined...
		client.on("joined", () => {
			// Send a message to the client that the kahoot has been joined
			socket.emit("joined");
		});

		// When the kahoot starts...
		client.on("quizStart", quiz => {
			// Generate the search URL to find the answers
			const URL = `https://create.kahoot.it/search?filter=1&query=${quiz.name}&tags=${quiz.name}`;
			(async () => {
				try {
					do {
						// Launch a browser
						const browser = await puppeteer.launch({ args: ["--no-sandbox", "--disable-setuid-sandbox"] });
						// const browser = await puppeteer.launch({
						// 	// headless: false,
						// 	// defaultViewport: null,
						// 	args: ["--no-sandbox", "--disable-setuid-sandbox"]
						// });
						// Make a new browser page
						const page = await browser.newPage();

						// Set a user agent so it is not detected as a bot
						page.setUserAgent("Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion");
						// Naviagte to the url
						await page.goto(URL);
						// Sign in
						await page.type(".username-email-input-field", process.env.EMAIL);
						await page.type(".password-input-field", process.env.PASSWORD);
						page.click(".button");

						// Wait for the links to load
						await page.waitForSelector(".kahoot-card__title-link");
						// Get an array of the links
						let searchResults = await page.$$(".search-result-kahoot-card");

						socket.emit("Results Found");

						// Loop over the search links
						for (searchResult of searchResults) {
							const kahootName = await searchResult.$eval(".kahoot-card__title-link", e => e.innerText);
							let questionCount = await searchResult.$eval(".kahoot-card__number-of-questions > span", e => e.innerText);
							questionCount = questionCount.split(" ")[0];
							if (kahootName == quiz.name && questionCount == quiz.questionCount) {
								socket.emit("Matches Found");

								const kahootLink = await searchResult.$eval(".kahoot-card__title-link", e => e.href);
								let QuestionsTemp = [];
								let AnswersTemp = [];

								// Create a new browser page
								const kahootPage = await browser.newPage();
								// Go to the Kahoot link
								await kahootPage.goto(kahootLink);

								// Select the page
								await kahootPage.bringToFront();

								// Get an array of the question links
								await kahootPage.waitForSelector(".question-list__item");
								let questionWrappers = await kahootPage.$$(".question-list__item");
								let i = 0;

								for (QuestionWrapper of questionWrappers) {
									QuestionsTemp.push(await QuestionWrapper.$eval(".question-media__text-inner-wrapper > span", e => e.innerText));
									i++;
									await kahootPage.click(`#question-${i}`);
									let choices = await QuestionWrapper.$$(".choices__choice");
									let counter = 1;
									let noAnswer = true;
									while (noAnswer === true) {
										for (choice of choices) {
											try {
												if ((await choice.$(".choices__choice--correct")) !== null) {
													AnswersTemp.push(counter);
													noAnswer = false;
													socket.emit("Found Answer");
												}
											} catch (error) {
											} finally {
												counter++;
											}
										}
									}
								}

								Kahoots.push({
									Name: quiz.name,
									Length: quiz.questionCount,
									Questions: QuestionsTemp,
									Answers: AnswersTemp
								});
							}
						}
						await browser.close();
						socket.emit("answers found");
					} while (Kahoots == []);

					client.on("questionStart", RecievedQuestion => {
						let answer;
						if (Kahoots != []) {
							answer = Kahoots[0].Answers[RecievedQuestion.index + 1];
						} else {
							answer = Math.ceil(Math.random() * 4);
						}

						RecievedQuestion.answer(answer - 1);
					});
				} catch (e) {
					console.log("our error" + e);
				}
			})();
		});
	});
});

// Listen for any events
http.listen(process.env.PORT, function() {
	console.log(`listening on *:${process.env.PORT}`);
});
